"""

N64 Converter
comm.py
Copyright 2020 Riley Lannon

A file for interfacing between the Arduino and pyserial.
This will take the signals generated by the arduino (sent over serial) and convert them into mouse movements and keystrokes.

"""

# libraries
import serial
import serial.tools.list_ports
import pynput
import pyautogui
import sys
import glob

# custom modules
import serial_packet

def serial_ports():
    """ Lists serial port names

        :raises EnvironmentError:
            On unsupported or unknown platforms
        :returns:
            A list of the serial ports available on the system
    """
    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this excludes your current terminal "/dev/tty"
        ports = glob.glob('/dev/tty[A-Za-z]*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')
    else:
        raise EnvironmentError('Unsupported platform')

    result = []
    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass
    return result


# Create the mouse and keyboard
mouse = pynput.mouse.Controller()
keyboard = pynput.keyboard.Controller()

def update_keys(pressed_buttons, packet):
    """ Updates which keys are up/down and where the mouse position is
    """
    data = list(packet)
    pressed = list(pressed_buttons)
    
    print(data)
    print(pressed)

    for i in range(data.__len__()):
        # we only need to make a change if the data aren't the same
        if pressed[i] != data[i]:
            if pressed[i] is bool or (i != 8 and i != 7):
                print("update key stroke")
            else:
                print("update mouse")

# we must first connect to the Arduino via serial
# view which connections are available
all_ports = serial_ports()

listed_ports = list(serial.tools.list_ports.comports())
arduino_port = ""

for port in listed_ports:
    if "Arduino" in port.__str__():
        arduino_port = port.__str__()
        break

if arduino_port == "":
    raise Exception("No Arduino detected")

to_connect_name = ""
for port in all_ports:
    if port in arduino_port:
        to_connect_name = port

if to_connect_name == "":
    raise Exception("Could not find port")

# connect to the serial port
conn = serial.Serial(to_connect_name, 9600, timeout=3)
if not conn.is_open:
    conn.open()

conn.reset_input_buffer();
print("Connected.")

# create the SerialPacket object
packet = serial_packet.SerialPacket()

# create an object to store controller data
pressed_buttons = serial_packet.Buttons()

while True:
    # read whole objects one at a time -- ensure that we can read the entire object
    if conn.in_waiting >= 18:
        # get the packet
        data = conn.readline(18);
        print(data)
        # packet.update(data)

        # update the keystrokes and current button data
        # update_keys(pressed_buttons, packet.buttons)
        # pressed_buttons = packet.buttons
